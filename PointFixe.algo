fonction PointFixe(Graphe g InOut, Noeud depart) :

début :
    idDepart <- 0
        tant que idDepart < longueur(g.listeNoeuds())-1 et g.listeNoeuds()[idDepart] != depart faire :
            idDepart <- idDepart + 1
    fpour
    j <- 0
    g.valeurs[idDepart].valeur <- 0
    pour j de 0 a longueur(hg.valeurs)-1 faire :
        g.valeurs[j].valeur <- +∞
    fpour

    pour i de 1 à longueur(g.listeNoeuds())-1 faire :
        pour chaque arc dans g.tousLesArcs() faire :
            si g.valeurs[arc.depart].valeur + arc.cout < g.valeurs[arc.destination].valeur alors :
                g.valeurs[arc.destination].valeur <- g.valeurs[arc.depart].valeur + arc.cout
                g.valeurs[arc.destination].parent <- arc.depart
            fin si
        fin pour
    fin pour

    pour chaque arc dans g.tousLesArcs() faire :
        si g.valeurs[arc.depart].valeur + arc.cout < g.valeurs[arc.destination].valeur alors :
            retourner "Le graphe contient un cycle de poids négatif"
        fin si
    fin pour

    retourner g.valeurs

fin PointFixe()


======= Lexique =======

tourne : booléen,   variable qui enregistre si une modification a été faite (devient faux si on a atteint le point fixe)
j : entier,         variable pour tenir la première boucle à jour et  initialiser les valeurs du graphe à +∞
i : entier,         variable pour tenir la deuxième boucle à jour et sélectionner les noeuds enfants du noeus de départ
idDepart : entier,  identificateur du noeud de départ
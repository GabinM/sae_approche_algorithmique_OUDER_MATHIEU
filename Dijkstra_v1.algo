# Cours :
#
#
# Construire un ensemble Dijkstra qui va “avaler” petit à petit tous les sommets du graphes en
# calculant la distance minimale.
# - Initialisation : on met le point de départ A dans l'ensemble Dijkstra avec L(A) = 0
# - Étape : On s’intéresse uniquement aux sommets (X) hors de Dijkstra qui sont reliés
# par un arc ou une arête à un sommet (Y) dans Dijkstra.
# On calcule : L(X) = Min{L(Y) + d(Y,X), Y antécédent de X et Y ∈ Dijkstra}
# - On recommence l’étape jusqu’à faire rentrer dans Dijkstra la destination, ou tous les
# sommets possibles.
# L’algorithme peut se présenter sous forme de tableau. Chaque colonne représente un
# sommet, plus une colonne à gauche pour Dijkstra.
# - Dans la colonne Dijkstra, on note le comment qui entre dans l’ensemble Dijkstra au
# début de l’étape (à la fin de l’étape précédente) avec sa distance.
# - Dans la ligne correspondante, on met le calcul de L(X ou un - si c’est un sommet
# qu’on ne calcule pas. Quand on a fini la ligne, on souligne ou encadre la valeur L(X)
# la plus petite. C’est le comment qu’on met dans Dijkstra à la ligne suivante
#
#


fonction Dijkstra_v1(Graphe g InOut, Noeud depart) : // modifier après pour inclure une liste de points déjà vus pour éviter une boucle infinie

G un graphe orienté avec une pondération positive des arcs (co^ut ou poids)
A un sommet (d´epart) de G
Début
    Q <- {} // utilisation d’une liste de noeuds `a traiter
    Pour chaque sommet v de G faire
        v.valeur <- Infini
        v.parent <- Indéfini
        Q <- Q U {v} // ajouter le sommet v `a la liste Q
    Fin Pour
    A.valeur <- 0
    Tant que Q est un ensemble non vide faire
        u <- un sommet de Q telle que u.valeur est minimal
        // enlever le sommet u de la liste Q
        Q <- Q \ {u}
        Pour chaque sommet v de Q tel que l’arc (u,v) existe faire
            d <- u.valeur + poids(u,v)
            Si d < v.valeur alors
                // le chemin est plus interessant
                v.valeur <- d
                v.parent <- u
            Fin Si
        Fin Pour
    Fin Tant que
fin Dijkstra_v1()


======= Lexique =======

j : entier, variable pour tenir la première boucle à jour et  initialiser les valeurs du graphe à +∞
i : entier, variable pour tenir la deuxième boucle à jour et sélectionner les noeuds enfants du noeus de départ
idDepart : entier, identificateur du noeud de départ